using Sirenix.OdinInspector;
using UnityEngine;

[CreateAssetMenu(menuName = "FarmLogistics/BuildingData")]
public class BuildingData : ScriptableObject
{
    /// <summary>
    /// The display name of the building, used to represent the building in the user interface or other display contexts.
    /// </summary>
    public string displayName;

    /// <summary>
    /// The visual representation of the building, typically displayed as a 2D sprite in the game interface or world.
    /// </summary>
    public Sprite icon;

    //public GameObject prefab;
    //public int buildCost;

    // Production logic

    /// <summary>
    /// Represents the type of product generated or produced by the building during production cycles.
    /// </summary>
    [HideIf("buildingRole", BuildingRole.Store)]
    public ProductData outputProduct;

    /// <summary>
    /// The quantity of the product generated by the building during each production cycle.
    /// </summary>
    [HideIf("buildingRole", BuildingRole.Store)]
    public int outputAmount = 1;

    /// <summary>
    /// The time, in seconds, required to complete a single production cycle for the building.
    /// Used to determine production intervals and update building state accordingly.
    /// </summary>
    public float productionTime = 5f;         // Seconds per cycle

    /// <summary>
    /// The maximum storage capacity for input materials in the building, shared among all input products.
    /// Defines the total limit for input materials that can be stored.
    /// </summary>
    public int inputStorageLimit;

    /// <summary>
    /// The maximum storage capacity for the output products generated by the building.
    /// Once this limit is reached, the building will stop producing until some of the stored output is consumed or removed.
    /// </summary>
    public int outputStorageLimit;

    /// <summary>
    /// The list of products required as input for the building to initiate and sustain its production processes.
    /// </summary>
    [HideIf("buildingRole", BuildingRole.Store)]
    public ProductStock[] inputProducts;

    [ShowIf("buildingRole", BuildingRole.Store)]
    public ProductStock[] storeStock;

    /// <summary>
    /// The dimensions of the building represented as a grid size. Determines the horizontal and vertical cell coverage of the building within the grid system.
    /// </summary>
    public Vector2Int size = Vector2Int.one; // Default 1x1

    /// <summary>
    /// Specifies the functional role of the building, categorizing it as a producer, factory, or store.
    /// Determines the building's behavior and its interaction with other systems in the game.
    /// </summary>
    public BuildingRole buildingRole;
}

/// <summary>
/// Represents the role of a building in the game, defining its primary function and behavior.
/// </summary>
public enum BuildingRole
{
    Producer,    // Farms (no input)
    Factory,     // Factory (Require Input)
    Store,       // Customer-facing stores
}

[System.Serializable]
public struct ProductStock{
    /// <summary>
    /// Represents data for a specific product, including its properties
    /// such as name and associated icon, used in the game's logistics and processing systems.
    /// </summary>
    public ProductData productData;

    /// <summary>
    /// Represents the quantity required for a specific input product in a building's production process.
    /// This value is used to determine the amount of stock to be consumed during production.
    /// </summary>
    public int amount;
}